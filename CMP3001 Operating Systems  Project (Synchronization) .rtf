{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\froman\fcharset0 Times-Bold;
\f3\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red0\green0\blue0;
\red106\green0\blue67;\red0\green0\blue178;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c49804\c0\c33333;\cssrgb\c0\c0\c75294;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\li20\fi-20\ri400\sa160\qc\partightenfactor0

\f0\b\fs42\fsmilli21333 \cf2 \cb3 \expnd0\expndtw0\kerning0
CMP3001 Operating Systems
\f1\b0\fs32 \cb1 \
\pard\pardeftab720\li20\fi-20\sa120\qc\partightenfactor0

\f0\b\fs42\fsmilli21333 \cf2 \cb3 Project (Synchronization)\'a0
\f1\b0\fs32 \cb1 \
\pard\pardeftab720\sa240\qc\partightenfactor0
\cf2 \cb3 Due: Sunday, January 7th (23:59)\cb1 \
\pard\pardeftab720\sa160\partightenfactor0

\f0\b\fs34\fsmilli17333 \cf2 \cb3 The Reader Writer Problem
\f1\b0\fs32 \cb1 \
\pard\pardeftab720\sa220\qj\partightenfactor0

\fs29\fsmilli14667 \cf2 \cb3 In this project you will need to provide a solution to readers-writers problem in which several processes (readers and writers) are trying to access shared variables. Obviously, if two readers access the shared data simultaneously, no adverse effects will result, hence, they are allowed to access. However, if a writer and some other process (either a reader or a writer) access the data simultaneously, chaos may ensue. To ensure that these difficulties do not arise, we require that the writers have exclusive access to the shared data while writing to the data.
\fs32 \cb1 \
\pard\pardeftab720\sa280\partightenfactor0

\fs29\fsmilli14667 \cf2 \cb3 The solution must guarantee that:
\fs32 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa60\partightenfactor0
\ls1\ilvl0
\fs29\fsmilli14667 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
If a writer has begun writing process, then
\fs32 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa60\partightenfactor0
\ls1\ilvl1
\fs29\fsmilli14667 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
No additional writer can perform write function
\fs32 \cb1 \
\ls1\ilvl1
\fs29\fsmilli14667 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
No reader is allowed to read
\fs32 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa40\partightenfactor0
\ls1\ilvl0
\fs29\fsmilli14667 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
If 1 or more readers are reading, then
\fs32 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa220\partightenfactor0
\ls1\ilvl1
\fs29\fsmilli14667 \cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
Other readers may read as well
\fs32 \cb1 \
\ls1\ilvl1
\fs29\fsmilli14667 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
No writer may perform write function until all readers have finished reading
\fs32 \cb1 \
\pard\pardeftab720\sa220\partightenfactor0

\fs29\fsmilli14667 \cf2 \cb3 \'a0
\fs32 \cb1 \

\fs29\fsmilli14667 \cb3 You are given Test class written in Java that use ReadWriteLock class and threads for the problem. You are expected to use Semaphore provided in the code.\'a0
\fs32 \cb1 \

\fs29\fsmilli14667 \cb3 Two operations on the semaphore is allowed; 
\f0\b acquire()
\f1\b0  and 
\f0\b release()
\f1\b0  (they correspond wait and signal functions)
\fs32 \cb1 \

\fs29\fsmilli14667 \cb3 To do: Implement methods of 
\f0\b ReadWriteLock
\f1\b0  class given.
\fs32 \cb1 \
\pard\pardeftab720\sa160\partightenfactor0

\f2\b\fs26\fsmilli13333 \cf5 \cb3 class
\f3\b0 \cf2  ReadWriteLock\{
\f1\fs32 \cb1 \
\pard\pardeftab720\sa160\partightenfactor0

\fs29\fsmilli14667 \cf2 \cb3 \'a0\'a0\'a0\'a0\'a0\'a0 
\f2\b\fs26\fsmilli13333 \cf5 private
\f3\b0 \cf2  Semaphore \cf6 \ul \ulc6 S\cf2 \ulnone =
\f2\b \cf5 new
\f3\b0 \cf2  Semaphore(1);\'a0
\f1\fs32 \cb1 \

\fs29\fsmilli14667 \cb3 \'a0\'a0\'a0\'a0\'a0\'a0 
\f2\b\fs26\fsmilli13333 \cf5 public
\f1\b0\fs29\fsmilli14667 \cf2  
\f2\b\fs26\fsmilli13333 \cf5 void
\f3\b0 \cf2  readLock() \{\'a0\'a0 \'a0\'a0\'a0\'a0 \'a0
\f1\fs32 \cb1 \

\f3\fs26\fsmilli13333 \cb3 \'a0\'a0\'a0\'a0\'a0\'a0 \}
\f1\fs32 \cb1 \

\fs29\fsmilli14667 \cb3 \'a0\'a0\'a0\'a0\'a0\'a0 
\f2\b\fs26\fsmilli13333 \cf5 public
\f1\b0\fs29\fsmilli14667 \cf2  
\f2\b\fs26\fsmilli13333 \cf5 void
\f3\b0 \cf2  writeLock() \{\'a0 \'a0\'a0\'a0\'a0 \'a0
\f1\fs32 \cb1 \

\f3\fs26\fsmilli13333 \cb3 \'a0\'a0\'a0\'a0\'a0\'a0 \}
\f1\fs32 \cb1 \

\fs29\fsmilli14667 \cb3 \'a0\'a0\'a0\'a0\'a0\'a0 
\f2\b\fs26\fsmilli13333 \cf5 public
\f1\b0\fs29\fsmilli14667 \cf2  
\f2\b\fs26\fsmilli13333 \cf5 void
\f3\b0 \cf2  readUnLock() \{ \'a0\'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0 \'a0
\f1\fs32 \cb1 \

\f3\fs26\fsmilli13333 \cb3 \'a0\'a0\'a0\'a0\'a0\'a0 \}
\f1\fs32 \cb1 \

\fs29\fsmilli14667 \cb3 \'a0\'a0\'a0\'a0\'a0\'a0 
\f2\b\fs26\fsmilli13333 \cf5 public
\f1\b0\fs29\fsmilli14667 \cf2  
\f2\b\fs26\fsmilli13333 \cf5 void
\f3\b0 \cf2  writeUnLock() \{ \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0 \'a0
\f1\fs32 \cb1 \

\f3\fs26\fsmilli13333 \cb3 \'a0\'a0\'a0\'a0\'a0\'a0 \}
\f1\fs32 \cb1 \

\fs29\fsmilli14667 \cb3 \'a0
\fs32 \cb1 \
\pard\pardeftab720\sa200\partightenfactor0

\f3\fs26\fsmilli13333 \cf2 \cb3 \}
\f1\fs32 \cb1 \
\pard\pardeftab720\sa180\partightenfactor0

\fs29\fsmilli14667 \cf2 \cb3 \'a0
\fs32 \cb1 \
\pard\pardeftab720\sa200\partightenfactor0

\fs29\fsmilli14667 \cf2 \cb3 \'a0
\fs32 \cb1 \
\pard\pardeftab720\sa160\partightenfactor0

\fs29\fsmilli14667 \cf2 \cb3 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \'a0
\fs32 \cb1 \
\pard\pardeftab720\sa160\partightenfactor0

\f0\b\fs34\fsmilli17333 \cf2 \cb3 Submission
\fs37\fsmilli18667 :
\f1\b0\fs32 \cb1 \
\pard\pardeftab720\sa260\partightenfactor0

\fs29\fsmilli14667 \cf2 \cb3 You must still submit your source code and 
\f0\b \ul a word document
\f1\b0 \ulnone  explaining details of your solution over 
\f0\b itslearning
\f1\b0  before the deadline. No submission will be accepted after deadline.
\fs32 \cb1 \
\pard\pardeftab720\sa160\partightenfactor0

\f0\b\fs34\fsmilli17333 \cf2 \cb3 Grading:
\f1\b0\fs32 \cb1 \
\pard\pardeftab720\sa220\partightenfactor0

\fs29\fsmilli14667 \cf2 \cb3 Your grade will be based on manual inspection of the code and REPORT.
\fs32 \cb1 \
}